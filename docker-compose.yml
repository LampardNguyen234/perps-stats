# ====================================================================================================
# Docker Compose Configuration for perps-stats
# ====================================================================================================
# Services:
#   - postgres: PostgreSQL 15 database with TimescaleDB extension
#   - perps-stats: Main application container
#   - grafana: Grafana dashboard (optional, commented out)
# ====================================================================================================

version: '3.8'

services:
  # ==================================================================================================
  # PostgreSQL Database with TimescaleDB
  # ==================================================================================================
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: perps-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: perps
      POSTGRES_USER: perps
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-perps_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Initialize database schema on first run
      - ./migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - perps-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U perps -d perps"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================================================================
  # Database Initialization (runs once)
  # ==================================================================================================
  perps-init:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: perps-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://perps:${POSTGRES_PASSWORD:-perps_secure_password}@postgres:5432/perps
      RUST_LOG: ${RUST_LOG:-perps_stats=info}
    networks:
      - perps-network
    command:
      - perps-stats
      - db
      - migrate
    restart: "no"  # Only run once
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==================================================================================================
  # perps-stats Application - Continuous Data Collection
  # ==================================================================================================
  perps-stats:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: perps-stats
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      perps-init:
        condition: service_completed_successfully
    environment:
      # Database configuration
      DATABASE_URL: postgres://perps:${POSTGRES_PASSWORD:-perps_secure_password}@postgres:5432/perps

      # Logging configuration
      RUST_LOG: ${RUST_LOG:-perps_stats=info,perps_core=info}

      # Application settings
      DATA_DIR: /data
    volumes:
      # Persistent data directory for output files
      - data_volume:/data

      # Mount symbols file (customize your trading pairs)
      - ./symbols.txt:/app/symbols.txt:ro

      # Mount custom config if needed
      # - ./config:/app/config:ro
    networks:
      - perps-network

    # Default: Start continuous data collection service for all exchanges
    command:
      - perps-stats
      - start
      - -e
      - "extended,aster,pacifica,lighter,hyperliquid,paradex,binance"
      - --report-interval
      - "${REPORT_INTERVAL:-30}"

    # Alternative commands (comment out above, uncomment one below):

    # Backfill historical data before starting collection
    # command:
    #   - perps-stats
    #   - backfill
    #   - -s
    #   - BTC,ETH,SOL
    #   - --intervals
    #   - 1h,1d

    # Stream real-time WebSocket data
    # command:
    #   - perps-stats
    #   - stream
    #   - --exchange
    #   - binance
    #   - -s
    #   - BTC,ETH
    #   - --data-types
    #   - ticker,trade,orderbook

    # Periodic Excel exports
    # command:
    #   - perps-stats
    #   - run
    #   - --interval
    #   - "300"

    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

    # Resource limits (adjust based on your needs)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M


# ====================================================================================================
# Networks
# ====================================================================================================
networks:
  perps-network:
    driver: bridge
    name: perps-network

# ====================================================================================================
# Volumes
# ====================================================================================================
volumes:
  postgres_data:
    name: perps-postgres-data
    driver: local

  data_volume:
    name: perps-data
    driver: local

  grafana_data:
    name: perps-grafana-data
    driver: local
